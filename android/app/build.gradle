apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'androidx.navigation.safeargs.kotlin'

apply from: 'codequality.gradle'
apply from: '../config/jacoco.gradle'

def keystorePropertiesFile = rootProject.file("signing.properties")
def keystoreProperties = new Properties()
def globalConfig = rootProject.extensions.getByName("ext")
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        config {
            // Remember to edit signing.properties to have the correct info for release build.
            storeFile file('../keystore_production')
            storePassword keystoreProperties['KEYSTORE_PASSWORD']
            keyPassword keystoreProperties['KEY_PASSWORD']
            keyAlias keystoreProperties['KEY_ALIAS']
        }
    }

    compileSdkVersion globalConfig["android_compile_sdk_version"]
    defaultConfig {
        applicationId "co.nimblehq.rxjava"
        minSdkVersion globalConfig["android_min_sdk_version"]
        targetSdkVersion globalConfig["android_target_sdk_version"]
        versionCode globalConfig["android_version_code"]
        versionName globalConfig["android_version_name"]
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            // For quickly testing build with proguard, enable this
            minifyEnabled false
        }
    }

    flavorDimensions "stage"
    productFlavors {
        production
        staging {
            applicationIdSuffix ".staging"
        }
    }

    sourceSets {
        test {
            resources.srcDirs += ['src/test/resources']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/MANIFEST.mf'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/rxjava.properties'
    }

    testOptions {
        unitTests {
            // Robolectric resource processing/loading
            includeAndroidResources = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation project(':common-rx')
    implementation project(':domain')

    kapt(
        "androidx.hilt:hilt-compiler:$hilt_androidx_version",
        "androidx.lifecycle:lifecycle-compiler:$android_lifecycle_version",
        "com.github.bumptech.glide:compiler:$glide_version",
        "com.google.dagger:hilt-android-compiler:$hilt_version"
    )

    implementation(
        fileTree(dir: 'libs', include: ['*.jar']),
        "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
        "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version",

        "androidx.legacy:legacy-support-v4:$android_legacy_support_version",
        "androidx.appcompat:appcompat:$android_support_version",
        "androidx.recyclerview:recyclerview:$android_support_version",
        "com.google.android.material:material:$android_material_version",
        "androidx.constraintlayout:constraintlayout:$constraint_layout_version",

        "androidx.navigation:navigation-runtime-ktx:$navigation_version",
        "androidx.navigation:navigation-fragment-ktx:$navigation_version",
        "androidx.navigation:navigation-ui-ktx:$navigation_version",

        "com.jakewharton.rxbinding3:rxbinding:$rxbinding_version",
        "com.jakewharton.rxbinding3:rxbinding-core:$rxbinding_version",

        "androidx.lifecycle:lifecycle-viewmodel-ktx:$android_lifecycle_version",
        "androidx.lifecycle:lifecycle-extensions:$android_lifecycle_version",
        "androidx.lifecycle:lifecycle-common-java8:$android_lifecycle_version",
        "androidx.lifecycle:lifecycle-runtime:$android_lifecycle_version",

        "androidx.core:core-ktx:$android_core_version",
        "androidx.fragment:fragment-ktx:$android_fragment_version",

        "com.google.dagger:hilt-android:$hilt_version",
        "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_androidx_version",
        "androidx.multidex:multidex:$multidex_version",

        "com.jakewharton.timber:timber:$timber_log_version",
        "com.github.bumptech.glide:glide:$glide_version",
        "com.github.tbruyelle:rxpermissions:$rxpermission_version"
    )

    debugImplementation "com.github.chuckerteam.chucker:library:$chucker_interceptor_version"
    releaseImplementation "com.github.chuckerteam.chucker:library-no-op:$chucker_interceptor_version"

    testImplementation(
        "junit:junit:$test_junit_version",
        "org.amshove.kluent:kluent-android:$test_kluent_version",
        "com.nhaarman.mockitokotlin2:mockito-kotlin:$test_mockito_version",
        "org.robolectric:shadowapi:$test_robolectric_version"
    )

    androidTestImplementation(
        "androidx.test:runner:$android_test_version",
        "androidx.test:rules:$android_test_version",
    )
}
